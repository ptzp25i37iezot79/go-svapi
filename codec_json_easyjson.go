// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson932ebafbDecodeGithubComRiftbitGoVapi(in *jlexer.Lexer, out *TestReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "ttt":
			out.Ttt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson932ebafbEncodeGithubComRiftbitGoVapi(out *jwriter.Writer, in TestReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Ttt != "" {
		const prefix string = ",\"ttt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ttt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson932ebafbEncodeGithubComRiftbitGoVapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson932ebafbEncodeGithubComRiftbitGoVapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson932ebafbDecodeGithubComRiftbitGoVapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson932ebafbDecodeGithubComRiftbitGoVapi(l, v)
}
func easyjson932ebafbDecodeGithubComRiftbitGoVapi1(in *jlexer.Lexer, out *TestArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "ttt":
			out.Ttt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson932ebafbEncodeGithubComRiftbitGoVapi1(out *jwriter.Writer, in TestArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Ttt != "" {
		const prefix string = ",\"ttt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ttt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson932ebafbEncodeGithubComRiftbitGoVapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson932ebafbEncodeGithubComRiftbitGoVapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson932ebafbDecodeGithubComRiftbitGoVapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson932ebafbDecodeGithubComRiftbitGoVapi1(l, v)
}
func easyjson932ebafbDecodeGithubComRiftbitGoVapi2(in *jlexer.Lexer, out *ServerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Response).UnmarshalJSON(data))
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson932ebafbEncodeGithubComRiftbitGoVapi2(out *jwriter.Writer, in ServerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Response) != 0 {
		const prefix string = ",\"response\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Response).MarshalJSON())
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Error).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson932ebafbEncodeGithubComRiftbitGoVapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson932ebafbEncodeGithubComRiftbitGoVapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson932ebafbDecodeGithubComRiftbitGoVapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson932ebafbDecodeGithubComRiftbitGoVapi2(l, v)
}
func easyjson932ebafbDecodeGithubComRiftbitGoVapi3(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_code":
			out.ErrorCode = int(in.Int())
		case "error_msg":
			out.ErrorMessage = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson932ebafbEncodeGithubComRiftbitGoVapi3(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error_code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"error_msg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson932ebafbEncodeGithubComRiftbitGoVapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson932ebafbEncodeGithubComRiftbitGoVapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson932ebafbDecodeGithubComRiftbitGoVapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson932ebafbDecodeGithubComRiftbitGoVapi3(l, v)
}
